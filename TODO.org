* Overture
** Classes
*** DONE Semigroup
*** DONE Monoid
*** DONE Semigroupoid
*** DONE Category
*** DONE Lazy
    Lazy interface definition and lazy list example are done.
    Not sure how to implement and use ~fix~.
*** TODO Arrow
    Looking at [[https://pursuit.purescript.org/packages/purescript-profunctor][purescript]] typeclass hierarchy, they don't define ~Arrow~
    based class. Instead they use ~Profunctor~ as the base for arrow
    combinators.

    PureScript approach requires to put 2 constraints on type constructor.
    This is not possible in TypeScript. Instead I have to create new interface
    that extends all the required ones. So If I have to do it I might as well
    call it ~Arrow~. To make it /zero cost/ those interfaces will be empty,
    and used to enforce appropriate ~Profunctor~ and ~Category~.
*** DONE Contravariant
*** TODO Profunctor
**** TODO Choice
**** TODO Closed
**** TODO Clown
**** TODO Join
**** TODO Joker
**** TODO Split
**** TODO Star
**** TODO Strong
**** TODO Wrap
**** TODO Cochoice
**** TODO Costar
**** TODO Costrong
**** TODO Cowrap
** Implementations
*** TODO Data.Tuple
    Right now I don't know how to implement ~Applicative~ and
    ~Monad~ for ~Tuple<A, B>~ as that requires ~Monoid~ for type
    paameter ~A~. This itself isn't that hard, but the problem is
    in ~static~ member ~pure~. In that function I don't have access
    to any reference of type ~A~ to call it's ~mempty~ method.
*** TODO Data.Array
*** DONE Data.Text
*** TODO Data.Remote
*** Data.Functor.Contravariant
**** DONE Predicate
**** TODO Comparison
**** DONE Equivalence
* Doable
  ~do~ notation for overture.
** DONE Await
   This isn't possible as transformations run /after/ typechecking,
   and ~await~ is expecting a ~Promise<T>~.
   This won't allow me to enforce proper typing of program before
   transformations.
** DONE Generotors
   I could provide fake function type ~go~ that would take generator
   as parameter. Similar to what [[https://funkia.github.io/jabz/#go][Jabz]] is doing. The fact that they are
   doing it suggest that it could be properly typed, but instead of
   running generators treat in as syntactic sugar and apply code
   transformations.

   This turns out to be dead end as well. The jabz approach works becouse of
   loose typings of iterators/generators. That will however end with
   realease of [[https://devblogs.microsoft.com/typescript/announcing-typescript-3-6-beta/][TypeScript 3.6]]. It is not possible for ~yield~ to extract
   value hold by the monadic context.
** TODO Custom Solution
   I can use pair of 2 fake functions ~doable~ and ~bind~(?) that will mark
   the scope of ~do~ block and bind monadic value inside that block.
* Scope
  Lens library based on overture.
